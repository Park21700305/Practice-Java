//21700305 박지성 Report04
public class FindAdd { //조건을 충족하는 네 자리의 숫자를 찾는 프로그램이다.
    public static void main(String[] args) {//본 프로그램의 메인함수 이다.
        int num1, num2, num3, num4;// 순서대로 1000의 자리 수, 100의 자리수, 10의 자리수, 1의 자리수를 담을 정수형 변수이다.
        //for 반복문을 이용하여 1000에서 9900미만의 범위에서 답을 찾는다. 여기서 10000미만이 아닌 9900 미만인 이유는
        //9900 이상부터 천의 자리와 백의 자리 수가 이미 중복되기 때문에 조건1에 위배되므로 9900미만으로 범위를 좁혔다.
        for (int i = 1000; i < 9900; i++) {//1000부터 9900까지 i를 1씩 증가시키며 다음을 반복한다.
            //i의 값이 1씩 증가할때마다 각 자리수를 최신화 한다.
            num1 = i / 1000; //num1은 천의 자리수로 i의 값을 1000으로 나눈 몫이다.
            num2 = (i % 1000) / 100; // num2는 백의 자리수로 i의 값을 1000으로 나눈 나머지를 100으로 나눈 몫이다.
            num3 = (i % 100) / 10; // num3는 십의 자리수로 i의 값을 100으로 나눈 나머지를 10으로 나눈 몫이다.
            num4 = i % 10; // num4는 일의 자리수로 i의 값을 10으로 나눈 값의 나머지이다.
            //조건 1부터 조건문으로 각 자리수의 값들이 모두 서로 다른지 확인한다.  (num1 != num2)에서 false 시 더 비교할 필요가 없으므로 &&가 아닌
            //&를 사용하였다. 만약 조건을 만족하지 못한다면 다음 중첩 조건문으로 가지 않고 위의 for문으로 이동한다.
            if ((num1 != num2) & (num1 != num3) & (num1 != num4) & (num2 != num3) & (num2 != num4) & (num3 != num4)) {
                //모든 자리 수가 서로 다르다면 각 자리 수의 합이 27이 되는지 중첩조건문을 통해 확인한다. 조건이 중족되지 않을 시
                // 다음 중첩 조건문으로 가지 않고 위의 for문으로 이동한다.
                if (num1 + num2 + num3 + num4 == 27) {
                    //모든 자리 수가 서로 다르고 각 자리 수의 합이 27이라면 천의 자리 수가 십의 자리수의 3배가 되는지 확인한다.
                    //조건이 중족되지 않을 시 다음 중첩 조건문으로 가지 않고 위의 for문으로 이동한다.
                    if (num1 / 3 == num3) {
                        //모든 자리 수가 서로 다르고 각 자리 수의 합이 27, 천의 자리 수가 십의 자리수의 3배라면 이 수가 짝수인지 아닌지 확인한다.
                        if ((num4 % 2) != 0) {
                            //num4, 즉 일의 자리 수가 2로 나누었을때 나머지가 0이 아니라면 홀수이므로 조건 1,2,3,4를 모두 만족한다.
                            System.out.println("The address is " + i); // 따라서 현재 i값을 출력한다.
                            break;// 값을 찾고 출력했다면 반복문을 빠져나온 후 프로그램을 종료한다.
                        }
                    }
                }
            }
        }
    }
}



